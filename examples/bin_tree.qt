BinaryTree = class {
  root ||= nil?;

  __text = function(){

    current = __self?.root;
    res = '[';
    if( current? == nil?, [return(res? + ']')], {
      return( text(root?) );
    }),!;

    while( [current? <> nil?], {
      res += text(current?, ', ', sep='');
      current = current?.next;
    });
    del(res?, 0-1); del(res?, 0-1); // remove the last `, `
    res? + ']'
  };

  pop = function(val?){
    __self? .= (root, new Node(val?, __self?.root))!;
  };

  add = function(data?) {
    root = __self?.root;
    if(root? == nil?, {
      __self? .= (root, new Node(data?))!;
    }, {
      root?.add(data?);
    }),!;
  };

};

Node = class {
  data = __args?.0;
  left = __args?.1 || nil?;
  right = __args?.2 || nil?;

  __text = function() {
    text(__self?.data)
  };

  add = function(val?){
    data = __self?.data;
    left = __self?.left;
    right = __self?.right;

    if( val? < __self?.data, {
      if(left? == nil?, {
        __self? .= (left, val?);
      }, {
        left.add(val?);
      }),!;
    }, {
      if(right? == nil?, {
        __self? .= (right, val?);
      }, {
        right.add(val?);
      }),!;
    }),!;
  }

};

tree = new BinaryTree();
tree?.add('d');
tree?.add('c');
tree?.add('b');
tree?.add('a');
disp( tree? );
# disp( tree?.pop(),.0 );
disp( tree? );




